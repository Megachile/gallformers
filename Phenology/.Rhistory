agdd$phenogen <- paste(agdd$Gall_phenophase, agdd$Life_Stage, sep="_")
boxplot(agdd$agdd~agdd$phenogen, horizontal=T)
agdd$Host_Plant_ID <- gsub("swamp white oak", "Quercus bicolor",agdd$Host_Plant_ID)
agdd$Host_Plant_ID <- gsub("white oak", "Quercus alba",agdd$Host_Plant_ID)
agdd$Host_Plant_ID <- gsub("bur oak", "Quercus macrocarpa",agdd$Host_Plant_ID)
agdd$Host_Plant_ID <- gsub("119269", "Quercus stellata",agdd$Host_Plant_ID)
agdd$Host_Plant_ID <- gsub("54780", "Quercus bicolor",agdd$Host_Plant_ID)
agdd$Host_Plant_ID <- gsub("54779", "Quercus alba",agdd$Host_Plant_ID)
agdd$Host_Plant_ID <- gsub("54781", "Quercus macrocarpa",agdd$Host_Plant_ID)
agdd$Host_Plant_ID <- gsub("58726", "Quercus prinoides",agdd$Host_Plant_ID)
agdd$Host_Plant_ID <- gsub("128686", "Quercus montana",agdd$Host_Plant_ID)
agdd$Host_Plant_ID <- gsub("82754", "Quercus lyrata",agdd$Host_Plant_ID)
agdd$Host_Plant_ID <- gsub("54783", "Quercus muehlenbergii",agdd$Host_Plant_ID)
agdd$Host_Plant_ID <- gsub("371998", "Quercus margarettae",agdd$Host_Plant_ID)
agdd$Host_Plant_ID <- gsub("167642", "Quercus chapmanii",agdd$Host_Plant_ID)
agdd$Host_Plant_ID <- gsub("167661", "Quercus oglethorpensis",agdd$Host_Plant_ID)
agdd$Host_Plant_ID <- gsub("242521", "Quercus sinuata breviloba",agdd$Host_Plant_ID)
qmac <- agdd[agdd$Host_Plant_ID=="Quercus macrocarpa",]
boxplot(qmac$agdd~qmac$phenogen, horizontal=T)
qalb <- agdd[agdd$Host_Plant_ID=="Quercus alba",]
boxplot(qalb$agdd~qalb$phenogen, horizontal=T)
qstel <- agdd[agdd$Host_Plant_ID=="Quercus stellata",]
boxplot(qstel$agdd~qstel$phenogen, horizontal=T)
qbic <- agdd[agdd$Host_Plant_ID=="Quercus bicolor",]
boxplot(qbic$agdd~qbic$phenogen, horizontal=T)
qmar <- agdd[agdd$Host_Plant_ID=="Quercus margarettae",]
boxplot(qmar$agdd~qmar$phenogen, horizontal=T)
qmue <- agdd[agdd$Host_Plant_ID=="Quercus muehlenbergii",]
boxplot(qmue$agdd~qmue$phenogen, horizontal=T)
qlyr <- agdd[agdd$Host_Plant_ID=="Quercus lyrata",]
boxplot(qlyr$agdd~qlyr$phenogen, horizontal=T)
qmon <-  agdd[agdd$Host_Plant_ID=="Quercus montana",]
boxplot(qmon$agdd~qmon$phenogen, horizontal=T)
View(qalb)
View(agdd)
plot(agdd$Latitude, agdd$agdd)
agdd32 <- as.data.frame(lookUpAGDD(obs))
agdd <- agdd32
agdd <- agdd[!agdd$agdd=="-9999",]
plot(agdd$Latitude, agdd$agdd)
layers <- npn_get
layers <- npn_get_layer_details()
View(layers)
npn_get_agdd_point_data('si-x:average_bloom_best',lat=paste0(32.77475),long=paste0(-97.0936888889),store_data = FALSE)
npn_get_agdd_point_data('si-x:average_bloom_best',lat=paste0(32.77475),long=paste0(-97.0936888889),date=paste0(2017-04-14),store_data = FALSE)
npn_get_agdd_point_data('gdd:agdd_50f',lat=paste0(32.77475),long=paste0(-97.0936888889),date=paste0(2017-04-14),store_data = FALSE)
npn_get_agdd_point_data('gdd:agdd_50f',lat=paste0("32.77475"),long=paste0("-97.0936888889"),date=paste0("2017-04-14"),store_data = FALSE)
npn_get_agdd_point_data('si-x:average_bloom_best',lat=paste0("32.77475"),long=paste0("-97.0936888889"),date=paste0("2017-04-14"),store_data = FALSE)
npn_get_point_data('si-x:average_bloom_best',lat=paste0("32.77475"),long=paste0("-97.0936888889"),date=paste0("2017-04-14"),store_data = FALSE)
date.toDOY("2017-04-14", format = "yyy-mm-dd")
date.to.DOY("2017-04-14", format = "yyy-mm-dd")
install.packages("TDPanalysis")
library(TDPanalysis)
date.to.DOY("2017-04-14", format = "yyy-mm-dd")
date.to.DOY("2017-04-14", format = "yyyy-mm-dd")
date.to.DOY(2017-04-14, format = "yyyy-mm-dd")
date.to.DOY(as.date(2017-04-14), format = "yyyy-mm-dd")
date.to.DOY(as.date(2017-04-14), format = "yyyy/mm/dd")
date.to.DOY(2017-04-14, format = "yyyy/mm/dd")
date.to.DOY(2017/04/14, format = "yyyy/mm/dd")
date.to.DOY("2017/04/14", format = "yyyy/mm/dd")
date.to.DOY("2017-04-14", format = "yyyy/mm/dd")
ydate("2017-04-14")
# library(purrr)
# library(iNatTools)
# library(remotes)
# library(rinat)
library(lubridate)
ydate("2017-04-14")
yday("2017-04-14")
View(x1)
lookUpSpring <-
x1 <- x1 %>% separate(location, c("Latitude","Longitude"), ",")
x <- x1
for (i in 1:dim(x)[1]){
x$springdate <- npn_get_point_data('si-x:average_bloom_best',lat=paste0(x$Latitude[i]),long=paste0(x$Longitude[i]),date=paste0(x$observed_on[i]),store_data = FALSE)
}
View(x)
for (i in 1:dim(x)[1]){
x$springdate <- npn_get_point_data('si-x:average_bloom_prism',lat=paste0(x$Latitude[i]),long=paste0(x$Longitude[i]),date=paste0(x$observed_on[i]),store_data = FALSE)
}
View(x)
for (i in 1:dim(x)[1]){
x$springdate <- npn_get_point_data('si-x:average_leaf_best',lat=paste0(x$Latitude[i]),long=paste0(x$Longitude[i]),date=paste0(x$observed_on[i]),store_data = FALSE)
}
View(x)
for (i in 1:dim(x)[1]){
x$springdate <- npn_get_point_data('si-x:average_bloom_ncep_historic',lat=paste0(x$Latitude[i]),long=paste0(x$Longitude[i]),date=paste0(x$observed_on[i]),store_data = FALSE)
}
View(x)
npn_get_point_data('si-x:average_bloom_ncep_historic',lat=paste0("40.8087615967"),long=paste0("-77.862663269"))
npn_get_point_data('si-x:average_bloom_ncep_historic',lat=paste0("40.8087615967"),long=paste0("-77.862663269"))
npn_get_point_data('si-x:average_bloom_ncep_historic',lat=paste0("40.8087615967"),long=paste0("-77.862663269"),date=paste0("2016-09-19"))
npn_get_point_data('si-x:average_bloom_ncep_historic',lat=paste0("40.8087615967"),long=paste0("-77.862663269"),date=paste0("2016-09-01"))
npn_get_point_data('si-x:average_bloom_ncep_historic',lat=paste0("35.9383583333"),long=paste0("-78.6970583333"),date=paste0("2016-09-01"))
for (i in 1:dim(x)[1]){
x$springdate[i] <- npn_get_point_data('si-x:average_bloom_ncep_historic',lat=paste0(x$Latitude[i]),long=paste0(x$Longitude[i]),date=paste0(x$observed_on[i]),store_data = FALSE)
}
View(layers)
for (i in 1:dim(x)[1]){
x$leafdate[i] <- npn_get_point_data('si-x:average_leaf_best',lat=paste0(x$Latitude[i]),long=paste0(x$Longitude[i]),date=paste0(x$observed_on[i]),store_data = FALSE)
}
plot(x$springdate, x$leaf)
plot(x$springdate, x$leafdate)
plot(yday(x$observed_on), x$leafdate)
View(layers)
plot(yday(x$observed_on), x$springdate)
npn_get_point_data('si-x:average_leaf_best',lat=paste0("35.9383583333"),long=paste0("-78.6970583333"),date=paste0("2016-09-01"))
npn_get_point_data('si-x:average_leaf_best',lat=paste0("35.9383583333"),long=paste0("-78.6970583333"),date=paste0("2016-04-01"))
for (i in 1:dim(x)[1]){
x$sinceleaf[i] <- yday(x$observed_on - npn_get_point_data('si-x:average_leaf_best',lat=paste0(x$Latitude[i]),long=paste0(x$Longitude[i]),date=paste0(x$observed_on[i]),store_data = FALSE)
}
x$sinceleaf[i] <- yday(x$observed_on) - npn_get_point_data('si-x:average_leaf_best',lat=paste0(x$Latitude[i]),long=paste0(x$Longitude[i]),date=paste0(x$observed_on[i]),store_data = FALSE)
for (i in 1:dim(x)[1]){
x$sinceleaf[i] <- yday(x$observed_on) - npn_get_point_data('si-x:average_leaf_best',lat=paste0(x$Latitude[i]),long=paste0(x$Longitude[i]),date=paste0(x$observed_on[i]),store_data = FALSE)
}
plot(yday(x$observed_on), x$sinceleaf)
yday("2018-04-12") - 25.66667
for (i in 1:dim(x)[1]){
x$sinceleaf[i] <- sum(yday(x$observed_on), -npn_get_point_data('si-x:average_leaf_best',lat=paste0(x$Latitude[i]),long=paste0(x$Longitude[i]),date=paste0(x$observed_on[i]),store_data = FALSE)
}
for (i in 1:dim(x)[1]){
x$sinceleaf[i] <- sum(yday(x$observed_on)), -npn_get_point_data('si-x:average_leaf_best',lat=paste0(x$Latitude[i]),long=paste0(x$Longitude[i]),date=paste0(x$observed_on[i]),store_data = FALSE)
}
for (i in 1:dim(x)[1]){
x$sinceleaf[i] <- sum(yday(x$observed_on), -npn_get_point_data('si-x:average_leaf_best',lat=paste0(x$Latitude[i]),long=paste0(x$Longitude[i]),date=paste0(x$observed_on[i]),store_data = FALSE))
}
x$sinceleaf <- sum(yday(x$observed_on), -x$leafdate)
yday(x$observed_on)
-x$leafdate
x$sinceleaf <- yday(x$observed_on) - x$leafdate)
x$sinceleaf <- yday(x$observed_on) - x$leafdate
plot(yday(x$observed_on), x$sinceleaf)
lookUpSinceLeaf <- function(x){
for (i in 1:dim(x)[1]){
x$leafdate[i] <- npn_get_point_data('si-x:average_leaf_best',lat=paste0(x$Latitude[i]),long=paste0(x$Longitude[i]),date=paste0(x$observed_on[i]),store_data = FALSE)
}
x$sinceleaf <- yday(x$observed_on) - x$leafdate
}
leafdate <- as.data.frame(lookUpSinceLeaf(obs))
View(leafdate)
lookUpSinceLeaf <- function(x){
for (i in 1:dim(x)[1]){
x$leafdate[i] <- npn_get_point_data('si-x:average_leaf_best',lat=paste0(x$Latitude[i]),long=paste0(x$Longitude[i]),date=paste0(x$observed_on[i]),store_data = FALSE)
}
x$sinceleaf <- yday(x$observed_on) - x$leafdate
return(x)
}
leafdate <- cbind(obs, leafdate)
View(leafdate)
#for galls with one gen
leafdate$phenogen <- paste(agdd$Gall_phenophase, agdd$Life_Stage, sep="_")
leafdate$phenogen <- paste(leafdate$Gall_phenophase, leafdate$Life_Stage, sep="_")
boxplot(leafdate$sinceleaf~leafdate$phenogen, horizontal=T)
name(leafdate$lookUpSinceLeaf(obs)) <- sinceleaf
name(leafdate$lookUpSinceLeaf(obs)) <- "sinceleaf"
sinceleaf <- name(leafdate$lookUpSinceLeaf(obs))
leafdate %>%
rename(
lookUpSinceLeaf(obs) =sinceleaf
)
names(leafdate$lookUpSinceLeaf(obs)) <- "sinceleaf"
names(leafdate$lookUpSinceLeaf(obs))[12] <- "sinceleaf"
names(leafdate$lookUpSinceLeaf(obs))[12]
names(leafdate)[12] <- "sinceleaf"
boxplot(leafdate$sinceleaf~leafdate$phenogen, horizontal=T)
boxplot(agdd32$agdd~agdd32$phenogen, horizontal=T)
boxplot(agdd50$agdd~agdd50$phenogen, horizontal=T)
agdd32$phenogen <- paste(agdd32$Gall_phenophase, agdd32$Life_Stage, sep="_")
agdd50$phenogen <- paste(agdd50$Gall_phenophase, agdd50$Life_Stage, sep="_")
boxplot(agdd32$agdd~agdd32$phenogen, horizontal=T)
agdd32 <- agdd32[!agdd$agdd=="-9999",]
agdd50 <- agdd50[!agdd$agdd=="-9999",]
boxplot(agdd32$agdd~agdd32$phenogen, horizontal=T)
boxplot(agdd50$agdd~agdd50$phenogen, horizontal=T)
agdd32 <- agdd32[!agdd$agdd=="-9999",]
boxplot(agdd32$agdd~agdd32$phenogen, horizontal=T)
agdd32 <- as.data.frame(lookUpAGDD(obs))
View(agdd50)
View(agdd50)
View(agdd32)
agdd32 <- agdd32[!agdd32$agdd=="-9999",]
agdd50 <- agdd50[!agdd50$agdd=="-9999",]
agdd32$phenogen <- paste(agdd32$Gall_phenophase, agdd32$Life_Stage, sep="_")
agdd50$phenogen <- paste(agdd50$Gall_phenophase, agdd50$Life_Stage, sep="_")
boxplot(leafdate$sinceleaf~leafdate$phenogen, horizontal=T)
boxplot(agdd32$agdd~agdd32$phenogen, horizontal=T)
boxplot(agdd50$agdd~agdd50$phenogen, horizontal=T)
plot(yday(leafdate$observed_on, leafdate$sinceleaf)
plot(yday(leafdate$observed_on, leafdate$sinceleaf))
plot(yday(leafdate$observed_on, leafdate$sinceleaf))
plot(yday(leafdate$observed_on), leafdate$sinceleaf))
plot(yday(leafdate$observed_on), leafdate$sinceleaf)
plot(yday(leafdate$observed_on), agdd32$agdd)
plot(yday(agdd32$observed_on), agdd32$agdd)
plot(leafdate$Latitude, leafdate$sinceleaf)
plot(agdd32$Latitude), agdd32$agdd)
plot(agdd32$Latitude, agdd32$agdd)
plot(agdd50$Latitude, agdd50$agdd)
layers <- npn_get_layer_details()
View(layers)
lookUpSinceBloom <- function(x){
for (i in 1:dim(x)[1]){
x$bloomdate[i] <- npn_get_point_data('si-x:average_bloom_best',lat=paste0(x$Latitude[i]),long=paste0(x$Longitude[i]),date=paste0(x$observed_on[i]),store_data = FALSE)
}
x$sincebloom <- yday(x$observed_on) - x$leafdate
return(x)
}
lookUpSinceBloom <- function(x){
for (i in 1:dim(x)[1]){
x$bloomdate[i] <- npn_get_point_data('si-x:average_bloom_best',lat=paste0(x$Latitude[i]),long=paste0(x$Longitude[i]),date=paste0(x$observed_on[i]),store_data = FALSE)
}
x$sincebloom <- yday(x$observed_on) - x$leafdate
return(x)
}
### Get annotation codes
a <- fromJSON("https://api.inaturalist.org/v1/controlled_terms")
a <- flatten(a$results)
l <- lapply(seq_along(a[, "values"]), function(i) {
cbind(idann = a$id[i], labelann = a$label[i], a[i, "values"][[1]][, c("id", "label")])
})
ann <- do.call("rbind", l)
ann
keep <-
c("id", "observed_on", "taxon.name", "location", "uri", "ofvs","annotations") # values to keep
### Request url by Taxon ID
url <-
paste0(
"https://api.inaturalist.org/v1/observations?quality_grade=any&identifications=any&page=1&per_page=200&place_id=1&order=desc&order_by=created_at&d1=2016-01-01&taxon_id=",
"559755"
)
### alt url template for observation by GF Code
# url <-
#   paste0(
#     "https://api.inaturalist.org/v1/observations?quality_grade=any&identifications=any&page=1&per_page=200&place_id=1order=desc&order_by=created_at&",
#     "any&field%3Agallformers%2Bcode=q-imbricaria-nipple-gall"
#   )
nobs <- fromJSON(url)
npages <- ceiling(nobs$total_results / 200)
xout <- flatten(nobs$results)
xout <- xout[,keep]
for(i in 2:npages) {
# Get json and flatten
page <- paste0("&page=", i)
x <- fromJSON(gsub("&page=1", page, url))
Sys.sleep(.5)
x <- flatten(x$results)
x1 <- x[,keep]
xout <- rbind(xout,x1)
}
x <- xout
url <-
paste0(
"https://api.inaturalist.org/v1/observations?quality_grade=any&identifications=any&page=1&per_page=200&place_id=1&order=desc&order_by=created_at&taxon_id=",
"559755",
"&d1=2016-01-01"
)
nobs <- fromJSON(url)
npages <- ceiling(nobs$total_results / 200)
xout <- flatten(nobs$results)
xout <- xout[,keep]
for(i in 2:npages) {
# Get json and flatten
page <- paste0("&page=", i)
x <- fromJSON(gsub("&page=1", page, url))
Sys.sleep(.5)
x <- flatten(x$results)
x1 <- x[,keep]
xout <- rbind(xout,x1)
}
x <- xout
View(xout)
url <-
paste0(
"https://api.inaturalist.org/v1/observations?quality_grade=any&identifications=any&d1=2016-01-01&page=1&per_page=200&place_id=1&order=desc&order_by=created_at&taxon_id=",
"559755"
)
nobs <- fromJSON(url)
npages <- ceiling(nobs$total_results / 200)
xout <- flatten(nobs$results)
xout <- xout[,keep]
for(i in 2:npages) {
# Get json and flatten
page <- paste0("&page=", i)
x <- fromJSON(gsub("&page=1", page, url))
Sys.sleep(.5)
x <- flatten(x$results)
x1 <- x[,keep]
xout <- rbind(xout,x1)
}
x <- xout
### Extract annotations if any
vals <- lapply(seq_along(x$annotations), function(i) {
j <- x$annotations[[i]]
n <- c("controlled_attribute_id", "controlled_value_id")
if (all(n %in% names(j))) {
# tests if there are any annotations for the obs
ans <- j[, n]
} else{
ans <-
data.frame(x = NA, y = NA) # if no annotations create NA data.frame
names(ans) <- n
}
cbind(x[i, keep][rep(1, nrow(ans)),], ans) # repeat obs for each annotation value and bind with ann
})
vals <- do.call("rbind", vals) # bind everything
View(vals)
keep <-
c(
"id",
"observed_on",
"taxon.name",
"location",
"uri",
"ofvs",
"controlled_attribute_id",
"controlled_value_id"
) # values to keep
of <- lapply(seq_along(vals$ofvs), function(i) {
f <- vals$ofvs[[i]]
m <- c("name", "value")
if (all(m %in% names(f))) {
# tests if there are any annotations for the obs
ans <- f[, m]
} else{
ans <-
data.frame(x = NA, y = NA) # if no annotations create NA data.frame
names(ans) <- m
}
cbind(vals[i, keep][rep(1, nrow(ans)),], ans) # repeat obs for each annotation value and bind with ann
})
of <- do.call("rbind", of) # bind everything
View(of)
## Merge obs with annotations
obs <-
merge(
of,
ann,
by.x = c("controlled_attribute_id", "controlled_value_id"),
by.y = c("idann", "id"),
all.x = TRUE
)
obs <- obs[order(obs$id), ]
View(obs)
Hostcodes$codes <- c("swamp white oak", "white oak","bur oak","119269","54780","54779","54781","58726","128686","82754","54783","371998","167642","167661","242521")
Hostcodes <- c("swamp white oak", "white oak","bur oak","119269","54780","54779","54781","58726","128686","82754","54783","371998","167642","167661","242521")
codes <- c("swamp white oak", "white oak","bur oak","119269","54780","54779","54781","58726","128686","82754","54783","371998","167642","167661","242521")
binom <- c("Quercus bicolor","Quercus alba","Quercus macrocarpa","Quercus stellata","Quercus bicolor","Quercus alba","Quercus macrocarpa","Quercus prinoides","Quercus montana","Quercus lyrata","Quercus muehlenbergii","Quercus margarettae","Quercus chapmanii","Quercus oglethorpensis","Quercus sinuata breviloba")
Hostcodes <- cbind(codes, binom)
Hostcodes <- as.data.frame(cbind(codes, binom))
View(Hostcodes)
View(obs)
### Cast from long to wide and concatenate annotation values
# Results in a single line per obs
setDT(obs) # turn df to data.table to use dcast
obs <- dcast(
obs,
id + uri + observed_on + location + taxon.name + name + value ~ labelann,
value.var = "label",
fun = function(i) {
paste(i, collapse = "; ")
}
)
names(obs) <- gsub(" ", "_", names(obs)) # remove spaces from column names
setDT(obs) # turn df to data.table to use dcast
obs <- dcast(
obs,
id + uri + observed_on + location + taxon.name + Evidence_of_Presence + Life_Stage + NA ~ name,
value.var = "value",
fun = function(i) {
paste(i, collapse = "; ")
}
)
names(obs) <- gsub(" ", "_", names(obs)) # remove spaces from column names
View(obs)
## for galls with generation tagged
obs <- obs[,c("id", "observed_on", "taxon.name","location","uri","Evidence_of_Presence","Life_Stage","Gall_generation","Gall_phenophase","Host_Plant_ID")]
merge(Hostcodes, agdd, by.x = codes, by.y = Host_Plant_ID,all.x = FALSE)
merge(Hostcodes, obs, by.x = codes, by.y = Host_Plant_ID,all.x = FALSE)
View(Hostcodes)
applycodes <- function(x){
x <- gsub(c(Hostcodes$codes), c(Hostcodes$binom), x$Host_Plant_ID)
return(x)
}
obs <- applycodes(obs)
applycodes <- function(x){
x <- gsub(Hostcodes$codes, Hostcodes$binom, x$Host_Plant_ID)
return(x)
}
obs <- applycodes(obs)
applycodes <- function(x){
x$Host_Plant_ID <- gsub(Hostcodes$codes, Hostcodes$binom, x$Host_Plant_ID)
return(x)
}
obs <- applycodes(obs)
dbExecute(gallphen, "DROP TABLE sources")
dbExecute(gallphen, "DROP TABLE hosts")
dbExecute(gallphen, "DROP TABLE galls")
dbExecute(gallphen, "DROP TABLE observations")
library(DBI)
library(DBI)
library(RSQLite)
wd <- "C:/Users/adam/Documents/GitHub/gallformers/Phenology"
setwd(wd)
gallphen <- dbConnect(RSQLite::SQLite(), "gallphen.sqlite")
prev <- read.csv(paste0(wd, "/aqpetagdd.csv"))
View(prev)
dbExecute(gallphen, "
CREATE TABLE species
(
species_id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
gf_id INTEGER NOT NULL,
genus TEXT,
species TEXT,
inatcode INTEGER
)")
dbExecute(gallphen, "
CREATE TABLE galls
(
gall_id INTEGER NOT NULL,
species_id INTEGER NOT NULL,
generation TEXT CHECK (generation IN ('Agamic','Sexgen','NA')),
described CHAR(1) CHECK (described IN ('y','n')),
FOREIGN KEY(gall_id) REFERENCES species(species_id),
)")
dbExecute(gallphen, "DROP TABLE specieshistory")
dbExecute(gallphen, "DROP TABLE hosts")
dbExecute(gallphen, "DROP TABLE galls")
dbExecute(gallphen, "DROP TABLE observations")
dbExecute(gallphen, "
CREATE TABLE species
(
species_id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
gf_id INTEGER NOT NULL,
genus TEXT,
species TEXT,
inatcode INTEGER
)")
dbExecute(gallphen, "
CREATE TABLE galls
(
gall_id INTEGER NOT NULL,
species_id INTEGER NOT NULL,
generation TEXT CHECK (generation IN ('Agamic','Sexgen','NA')),
described CHAR(1) CHECK (described IN ('y','n')),
FOREIGN KEY(gall_id) REFERENCES species(species_id),
)")
dbExecute(gallphen, "DROP TABLE specieshistory")
dbExecute(gallphen, "DROP TABLE hosts")
dbExecute(gallphen, "DROP TABLE galls")
dbExecute(gallphen, "DROP TABLE observations")
dbExecute(gallphen, "
CREATE TABLE species
(
species_id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
gf_id INTEGER,
genus TEXT,
species TEXT,
inatcode INTEGER
)")
dbExecute(gallphen, "DROP TABLE specoes")
dbExecute(gallphen, "DROP TABLE species")
dbExecute(gallphen, "
CREATE TABLE species
(
species_id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
gf_id INTEGER,
genus TEXT,
species TEXT,
inatcode INTEGER
)")
dbExecute(gallphen, "
CREATE TABLE galls
(
gall_id INTEGER NOT NULL,
generation TEXT CHECK (generation IN ('Agamic','Sexgen','NA')),
described CHAR(1) CHECK (described IN ('y','n')),
FOREIGN KEY(gall_id) REFERENCES species(species_id),
)")
dbExecute(gallphen, "
CREATE TABLE galls
(
gall_id INTEGER NOT NULL,
generation TEXT CHECK (generation IN ('Agamic','Sexgen','NA')),
described CHAR(1) CHECK (described IN ('y','n')),
FOREIGN KEY(gall_id) REFERENCES species(species_id)
)")
dbExecute(gallphen, "
CREATE TABLE observations
(
obs_id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
gall_id INTEGER,
host_id INTEGER,
sourceURL TEXT NOT NULL,
phenophase TEXT NOT NULL,
lifestage TEXT,
viability TEXT,
date TEXT NOT NULL,
doy INTEGER NOT NULL,
Latitude FLOAT NOT NULL,
Longitude FLOAT NOT NULL,
AGDD32 FLOAT,
AGDD50 FLOAT,
FOREIGN KEY(gall_id) REFERENCES galls(gall_id),
FOREIGN KEY(host_id) REFERENCES species(species_id)
)")
dbExecute(gallphen, "
CREATE table specieshistory (
species_id INTEGER NOT NULL,
update_date TEXT NOT NULL,
FOREIGN KEY(species_id) REFERENCES species(species_id)
)")
